(def block-n 64 l 100 n 200 m 300)

(fn matrix-mul (mtx-r mtx-a mtx-b)
  (:= mtx-r (for (a mtx-a)
              (for (b (apply map vector mtx-b)) (reduce + (map * a b))))))

(fn matrix-add (mtx-r mtx-a mtx-b)
  (:= mtx-r (map (fn (a b) (map + a b)) mtx-a mtx-b)))

(fn random-matrix (mtx-r) (:= mtx-r (repeat block-n (repeat block-n (rand)))))

(fn zero-matrix () (repeat block-n (repeat block-n 0)))

(fn distributed-matrix-mul (mat-r mat-a mat-b)
  (for (i (range l)
        j (range n)
        k (range m))
    (run matrix-mul (! zip 'i.j) (pin mat-a 'i.k) (pin mat-b 'k.j)))

  (fn queue-sum (result sum block-queue n-blocks)
    (if (= 0 n-blocks)
      (run (fn (r s) (:= r s)) (! pin result) (pin sum))

      (do
        (run matrix-add (! pin :sum) (pin sum) (zip block-queue))
          
        (run queue-sum (! pin result)
                       (? pin :sum) (? zip block-queue) (- n-blocks 1)))))
  
    (for (i (range l)
          j (range n))
    (run queue-sum (! pin mat-r 'i.j) (zero-matrix) (? zip 'i.j) m)))

(fn watchdog (zproc start)
  (if (not= zproc :done) (run watchdog zproc start)
                         (print "time:" (- (current-time) start))))

(fn main (args)
  (run watchdog (zip "proc") (current-time))

  (for (i (range l))
    (for (j (range m)) (run random-matrix (! pin :A 'i.j)))
    (for (k (range n)) (run random-matrix (! pin :B 'k.i))))
  
  (fork (! zip "proc") distributed-matrix-mul (! pin :R (span ""))
                                              (? pin (seq :A :B))))
